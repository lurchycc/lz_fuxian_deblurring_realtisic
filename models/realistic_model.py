from this import s
import torch
import random
from util.image_pool import ImagePool
from .base_model import BaseModel
from . import networks
from .perceptual_loss import PerceptualLoss
from .focal_frequency_loss import FocalFrequencyLoss

class RealisticModel(BaseModel):
    @staticmethod
    def modify_commandline_options(parser, is_train=True):
        """Add new dataset-specific options, and rewrite default values for existing options.

        Parameters:
            parser          -- original option parser
            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.

        Returns:
            the modified parser.

        For pix2pix, we do not use image buffer
        The training objective is: GAN Loss + lambda_L1 * ||G(A)-B||_1
        By default, we use vanilla GAN loss, UNet with batchnorm, and aligned datasets.
        """
        # changing the default values to match the pix2pix paper (https://phillipi.github.io/pix2pix/)
        parser.set_defaults(norm='batch', netG='unet_256', dataset_mode='aligned')
        if is_train:
            parser.set_defaults(pool_size=0, gan_mode='lsgan')
            parser.add_argument('--lambda_L1', type=float, default=100.0, help='weight for L1 loss')

        return parser
    def __init__(self,opt):
        BaseModel.__init__(self,opt)
        self.loss_names = ['D_DBGAN','D_BGAN','G_DBGAN','G_BGAN','G_L1','G_frequency_DBGAN']
        if self.isTrain:
            self.visual_names = ['real_sharp','syth_blur','fake_blur','fake_sharp','real_blur','fake_sharp_from_real_blur']
        else:
            self.visual_names = ['real_blur','fake_sharp_from_real_blur']
        if self.isTrain:
            self.model_names = ['G_DBGAN','D_DBGAN','G_BGAN','D_BGAN']
        else:
            self.model_names = ['G_DBGAN']

        self.netG_DBGAN = networks.define_G(opt.input_nc, opt.output_nc, opt.ngf, opt.netG, opt.norm,
                                      not opt.no_dropout, opt.init_type, opt.init_gain, self.gpu_ids)
        if self.isTrain:
            self.fake_blur_pool = ImagePool(opt.pool_size)
            self.netD_BGAN = networks.define_D(opt.input_nc, opt.ndf, opt.netD,
                                          opt.n_layers_D, opt.norm, opt.init_type, opt.init_gain, self.gpu_ids)
            self.netG_BGAN = networks.define_G(opt.input_nc, opt.output_nc, opt.ngf, opt.netG, opt.norm,
                                      not opt.no_dropout, opt.init_type, opt.init_gain, self.gpu_ids)
            self.netD_DBGAN = networks.define_D(opt.input_nc+opt.output_nc, opt.ndf, opt.netD,
                                          opt.n_layers_D, opt.norm, opt.init_type, opt.init_gain, self.gpu_ids)
            self.criterionGAN = networks.GANLoss(opt.gan_mode).to(self.device)
            self.criterionL1 = torch.nn.L1Loss()
            self.criterionPerceptual = PerceptualLoss()
            self.criterionFrequency = FocalFrequencyLoss()
            self.optimizer_G = torch.optim.Adam(self.netG_DBGAN.parameters(),lr=opt.lr,betas=(opt.beta1, 0.999))
            self.optimizer_D = torch.optim.Adam(self.netD_DBGAN.parameters(),lr=opt.lr,betas=(opt.beta1, 0.999))
            self.optimizers.append(self.optimizer_G)
            self.optimizers.append(self.optimizer_D)
    def set_input(self,input):
        # if self.isTrain:
        AtoB = self.opt.direction == 'AtoB'
        self.real_sharp = input['A' if AtoB else 'B'].to(self.device)
        # self.real_sharp = input['A' if AtoB else 'B']
        self.syth_blur = input['B' if AtoB else 'A'].to(self.device)
        self.image_paths = input['A_paths' if AtoB else 'B_paths']
        # else:
        self.real_blur = input['C'].to(self.device)
        self.image_paths = input['C_paths']
    def forward(self):
        if self.isTrain:
            self.fake_blur = self.netG_BGAN(self.real_sharp)
            flags = random.randint(0,1)
            # if flags==0:
            self.fake_sharp = self.netG_DBGAN(self.fake_blur)
            # else:
                # self.fake_sharp = self.netG_DBGAN(self.syth_blur)
            self.fake_sharp_from_real_blur = self.netG_DBGAN(self.real_blur)
        else:
            self.fake_sharp_from_real_blur = self.netG_DBGAN(self.real_blur)
    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # self.loss_D_BGAN_RBL = - torch.log(abs(loss_D_real - loss_D_fake)) - \
        #            torch.log(abs(1 - loss_D_fake - loss_D_real))
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake)*0.5
        # loss_D.backward()
        return loss_D
    def backward_D(self):
        fake_sharp_blur = torch.cat((self.fake_blur,self.fake_sharp),1)
        pred_fake = self.netD_DBGAN(fake_sharp_blur.detach())
        self.loss_D_fake = self.criterionGAN(pred_fake,False)
        real_sharp_blur = torch.cat((self.fake_blur,self.real_sharp),1)
        pred_real = self.netD_DBGAN(real_sharp_blur)
        self.loss_D_real = self.criterionGAN(pred_real,True)
        # self.loss_D_DBGAN_RBL = - torch.log(abs(self.loss_D_real - self.loss_D_fake)) - \
        #            torch.log(abs(1 - self.loss_D_fake - self.loss_D_real))
        self.loss_D_DBGAN = (self.loss_D_real+self.loss_D_fake)*0.5
        #BGAN——D
        fake_blur_pools = self.fake_blur_pool.query(self.fake_blur)
        self.loss_D_BGAN = self.backward_D_basic(self.netD_BGAN,self.real_blur,fake_blur_pools)
        self.loss_D = self.loss_D_BGAN+self.loss_D_DBGAN
        self.loss_D.backward(retain_graph=True)
    def backward_G(self):
        fake_sharp_blur = torch.cat((self.real_sharp,self.fake_blur),1)
        self.loss_G_DBGAN = self.criterionGAN(self.netD_DBGAN(fake_sharp_blur),True)
        self.loss_G_BGAN = self.criterionGAN(self.netD_BGAN(self.fake_blur),True)

        # self.loss_G_perceptual_BGAN = self.criterionPerceptual.forward(self.fake_blur,self.real_blur)
        self.loss_G_L1 = self.criterionL1(self.real_sharp,self.fake_sharp)*100.0
        # self.loss_G_perceptual_DBGAN = self.criterionPerceptual.forward(self.real_sharp,self.fake_sharp)
        self.loss_G_frequency_DBGAN = self.criterionFrequency.forward(self.real_sharp,self.fake_sharp)*100.0

        self.loss_G = self.loss_G_L1+self.loss_G_DBGAN+self.loss_G_BGAN+self.loss_G_frequency_DBGAN
        self.loss_G.backward()
    def optimize_parameters(self):
        self.forward()
        self.set_requires_grad(self.netD_DBGAN,True)
        self.optimizer_D.zero_grad()
        self.backward_D()
        self.optimizer_D.step()
        self.set_requires_grad(self.netD_DBGAN,False)
        self.optimizer_G.zero_grad()
        self.backward_G()
        self.optimizer_G.step()
